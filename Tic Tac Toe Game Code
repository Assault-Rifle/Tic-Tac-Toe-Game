#include <iostream>
#include <vector>

using namespace std;

#define COMPUTER 1
#define PLAYER 2
#define SIDE 3
#define COMPUTERMOVE 'O'
#define PLAYERMOVE 'X'

void showBoard(const vector<vector<char>>& board)
{
    cout << "\n";
    cout << "\t\t\t " << board[0][0] << " | " << board[0][1] << " | " << board[0][2] << " \n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t " << board[1][0] << " | " << board[1][1] << " | " << board[1][2] << " \n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t " << board[2][0] << " | " << board[2][1] << " | " << board[2][2] << " \n\n";
}

void initialise(vector<vector<char>>& board) {
    for (int i = 0; i < SIDE; ++i)
        for(int j=0; j<SIDE; j++)
            board[i][j] = char(3*i+j+1+'0');
}

void declareWinner(int whoseTurn) {
    if (whoseTurn == COMPUTER)
        cout << "COMPUTER has won\n";
    else
        cout << "PLAYER has won\n";
}

bool rowCrossed(const vector<vector<char>>& board) {
    for (int i = 0; i < SIDE; ++i){
        if (board[i][0]==board[i][1] && board[i][1]==board[i][2] && (board[i][0]=='X' || board[i][0]=='0') )
            return true;
    }
    return false;
}

bool columnCrossed(const vector<vector<char>>& board) {
    for (int i = 0; i < SIDE; ++i) {
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && (board[i][0]=='X' || board[i][0]=='O') )
            return true;
    }
    return false;
}

bool diagonalCrossed(const vector<vector<char>>& board) {
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && (board[0][0]=='X' || board[0][0]=='O') )
        return true;
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && (board[1][1]=='X' || board[1][1]=='O') )
        return true;
    return false;
}

bool gameOver(const vector<vector<char>>& board)
{
    return rowCrossed(board)||columnCrossed(board)||diagonalCrossed(board);
}

int minimax(vector<vector<char>>& board, int depth, bool isAI) {
    int score = 0;
    int bestScore = 0;

    if (gameOver(board)) {
        return isAI ? -10 : 10;
    }

    if (depth < 9) 
    {
        if (isAI) 
        {
            bestScore = -999;
            for (int i = 0; i < SIDE; ++i)
            {
                for (int j = 0; j < SIDE; ++j)
                {
                    if (board[i][j]!='X' && board[i][j]!='O') 
                    {
                        board[i][j] = COMPUTERMOVE;
                        score = minimax(board, depth + 1, false);
                        board[i][j] = char(3*i+j+1+'0');
                        bestScore = max(bestScore, score);
                    }
                }
            }
            return bestScore;
        } 
        else 
        {
            bestScore = 999;
            for (int i = 0; i < SIDE; ++i) {
                for (int j = 0; j < SIDE; ++j) {
                    if (board[i][j]!='X' && board[i][j]!='O') 
                    {
                        board[i][j] = PLAYERMOVE;
                        score = minimax(board, depth + 1, true);
                        board[i][j] = char(3*i+j+1+'0');
                        bestScore = min(bestScore, score);
                    }
                }
            }
            return bestScore;
        }
    }
    
    else
        return 0;
}

int bestMove(vector<vector<char>>& board, int moveIndex) {
    int x = -1, y = -1;
    int score = 0, bestScore = -999;

    for (int i = 0; i < SIDE; ++i)
    {
        for (int j = 0; j < SIDE; ++j)
        {
            if (board[i][j]!='X' && board[i][j]!='O')
            {
                board[i][j] = COMPUTERMOVE;
                score = minimax(board, moveIndex + 1, false);
                board[i][j] = char(3*i+j+1+'0');
                if (score > bestScore)
                {
                    bestScore = score;
                    x = i;
                    y = j;
                }
            }
        }
    }
    return x * 3 + y;
}

void playTicTacToe(int whoseTurn) {
    vector<vector<char>> board(SIDE, vector<char>(SIDE));
    int moveIndex = 0, x = 0, y = 0;
    initialise(board);

    while (!gameOver(board) && moveIndex != SIDE * SIDE) 
    {
        int n;
        if (whoseTurn == COMPUTER) 
        {
            n = bestMove(board, moveIndex);
            x = n / SIDE;
            y = n % SIDE;
            board[x][y] = COMPUTERMOVE;
            cout <<"COMPUTER has put a "<<COMPUTERMOVE<<" in cell "<< n+1;
            cout << "\n\n";
            ++moveIndex;
            whoseTurn = PLAYER;
        }
        else if (whoseTurn == PLAYER)
        {
            cout << "Choose available cell number from 1 to 9 to play/continue:";
            showBoard(board);
            cout << "Enter the position = ";
            cin >> n;
            --n;
            x = n / SIDE;
            y = n % SIDE;
            if (n < 9 && n >= 0 && board[x][y]!='X' && board[x][y]!='O')
            {
                board[x][y] = PLAYERMOVE;
                cout <<"\nPLAYER has put a "<<PLAYERMOVE<<" in cell "<<n+1;
                cout << "\n\n";
                ++moveIndex;
                whoseTurn = COMPUTER;
            } 
            else if(n<9 && n>=0 && (board[x][y]=='X'||board[x][y]=='O'))
            {
                cout << "\nPosition is occupied, select another place from the available places\n\n";
            }
            else if (n < 0 || n > 8)
            {
                cout << "Invalid position\n";
            }
        }
    }

    if (!gameOver(board) && moveIndex == SIDE * SIDE)
        cout << "It's a draw\n";
    else
    {
        declareWinner(whoseTurn == COMPUTER ? PLAYER : COMPUTER);
    }
}

int main() {
    cout << "\n";
    cout << "\t\t\t\t\t\t Tic-Tac-Toe Game\n\n";
    
    char cont = 'y';
    do {
        char choice;
        cout << "Do you want to start first? (y/n) : ";
        cin >> choice;
        if (choice == 'n')
            playTicTacToe(COMPUTER);
        else if (choice == 'y')
            playTicTacToe(PLAYER);
        else
            cout << "Invalid choice\n";

        cout << "\nDo you want to quit? (y/n) : ";
        cin >> cont;
        
        if(cont != 'n' && cont != 'y')  cout << "invalid option";
    } while (cont == 'n');

    cout << "\nThe Game has Ended";

    return 0;
}
